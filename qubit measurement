from ibm_quantum_widgets import CircuitComposer
from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit
from numpy import pi
from math import sqrt
# Create the X-measurement function:
def x_measurement(qc, qubit, cbit):
    """Measure 'qubit' in the X-basis, and store the result in 'cbit'"""
    qc.h(qubit)
    qc.measure(qubit, cbit)
    return qc
def z_measurement(qc, qubit, cbit):
    """Measure 'qubit' in the X-basis, and store the result in 'cbit'"""
    qc.id(qubit)
    qc.measure(qubit, cbit)
    return qc
def y_measurement(qc, qubit, cbit):
    """Measure 'qubit' in the X-basis, and store the result in 'cbit'"""
    qc.h(qubit)
    qc.sdg(qubit)
    qc.measure(qubit, cbit)
    return qc

a=new_sv.data
initial_state = a.tolist()
# Initialize our qubit and measure it
qc_x = QuantumCircuit(1,1)
qc_x.rz(15*pi/8,0)
qc_x.rz(15*pi/8,0)
qc_x.ry((math.acos((1/3)**0.5)),0) 
qc_x.rz(pi/4,0)
x_measurement(qc_x, 0, 0)  # measure qubit 0 to classical bit 0
qc_x.draw('mpl')



a=new_sv.data
initial_state = a.tolist()
qc_y = QuantumCircuit(1,1)
qc_y.rz(15*pi/8,0)
qc_y.rz(15*pi/8,0)
qc_y.ry((math.acos((1/3)**0.5)),0) 
qc_y.rz(pi/4,0)
y_measurement(qc_y, 0, 0)  # measure qubit 0 to classical bit 0
qc_y.draw('mpl')


a=new_sv.data
initial_state = a.tolist()
qc_z = QuantumCircuit(1,1)
qc_x.rz(15*pi/8,0)
qc_z.rz(15*pi/8,0)
qc_z.ry((math.acos((1/3)**0.5)),0) 
qc_z.rz(pi/4,0)
z_measurement(qc_z, 0, 0)  # measure qubit 0 to classical bit 0
qc_z.draw('mpl')





from qiskit import Aer, execute
from qiskit.visualization import plot_histogram
def measurement_probability(qc):
    def ratio_1(i,qc):
        t_1=[]
        simulator = Aer.get_backend('qasm_simulator')
        result = execute(qc, simulator, shots=i).result()
        counts = result.get_counts(qc)
        t_1.append(counts['1']/(counts['1']+counts['0']))
        return t_1
    def ratio_0(i,qc):
        t_0=[]
        simulator = Aer.get_backend('qasm_simulator')
        result = execute(qc, simulator, shots=i).result()
        counts = result.get_counts(qc)
        t_0.append(counts['0']/(counts['1']+counts['0']))
        return t_0 
    def list_made0(qc):
        t0=[]
        for i in range(500,1000):
            t0+=ratio_0(i,qc)
        return t0
    def list_made1(qc):
        t1=[]
        for i in range(500,1000):
            t1+=ratio_1(i,qc)
        return t1
    t0=list_made0(qc)
    t1=list_made1(qc)
    counts={}
    counts['0']=sum(t0)/len(t0)
    counts['1']=sum(t1)/len(t1)
    return plot_histogram(counts,color='blue', title="probability 0,1")
    
    
    
    
    
    
    import numpy
import matplotlib.pyplot as plt

def plot_probability(qc): 
    def ratio_1(i,qc):
        t_1=[]
        simulator = Aer.get_backend('qasm_simulator')
        result = execute(qc, simulator, shots=i).result()
        counts = result.get_counts(qc)
        t_1.append(counts['1']/(counts['1']+counts['0']))
        return t_1
    def ratio_0(i,qc):
        t_0=[]
        simulator = Aer.get_backend('qasm_simulator')
        result = execute(qc, simulator, shots=i).result()
        counts = result.get_counts(qc)
        t_0.append(counts['0']/(counts['1']+counts['0']))
        return t_0 
    def list_made0(qc):
        t0=[]
        for i in range(500,1000):
            t0+=ratio_0(i,qc)
        return t0
    def list_made1(qc):
        t1=[]
        for i in range(500,1000):
            t1+=ratio_1(i,qc)
        return t1
    t0=list_made0(qc)
    t1=list_made1(qc)
# Data
    array0=numpy.array(t0)
    array1=numpy.array(t1)
# Calculate the average
    g0_mean = np.mean(array0)
    g1_mean = np.mean(array1)
# Calculate the standard deviation
    g0_std = np.std(array0)
    g1_std = np.std(array1)
# Define labels, positions, bar heights and error bar heights
    labels = ['0', '1']
    x_pos = np.arange(len(labels))
    CTEs = [g0_mean, g1_mean]
    error = [g0_std, g1_std]
    fig, ax = plt.subplots()
    ax.bar(x_pos, CTEs,
           yerr=error,
           align='center',
           alpha=0.5,
           ecolor='black',
           capsize=10)
    ax.set_ylabel('average probability')
    ax.set_xticks(x_pos)
    ax.set_xticklabels(labels)
    ax.set_title('axes-measurment probability')
    ax.yaxis.grid(True)

# Save the figure and show
    plt.tight_layout()
    plt.savefig('bar_plot_with_error_bars.png')
    plt.show()
